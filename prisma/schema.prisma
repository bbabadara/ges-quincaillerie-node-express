// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle Utilisateur pour l'authentification et les rôles
model Utilisateur {
  id                Int      @id @default(autoincrement())
  nom_utilisateur   String   @unique
  mot_de_passe_hache String
  role              Role
  actif             Boolean  @default(true)
  date_creation     DateTime @default(now())
  date_modification DateTime @updatedAt

  @@map("utilisateurs")
}

// Énumération des rôles
enum Role {
  GESTIONNAIRE
  RESPONSABLE_ACHAT
  RESPONSABLE_PAIEMENT
}

// Modèle Catégorie
model Categorie {
  id                Int             @id @default(autoincrement())
  nom               String          @unique
  description       String?
  actif             Boolean         @default(true)
  date_creation     DateTime        @default(now())
  date_modification DateTime        @updatedAt
  
  // Relations
  sous_categories   SousCategorie[]

  @@map("categories")
}

// Modèle Sous-catégorie
model SousCategorie {
  id                Int       @id @default(autoincrement())
  nom               String
  description       String?
  categorie_id      Int
  actif             Boolean   @default(true)
  date_creation     DateTime  @default(now())
  date_modification DateTime  @updatedAt
  
  // Relations
  categorie         Categorie @relation(fields: [categorie_id], references: [id])
  produits          Produit[]

  @@unique([nom, categorie_id])
  @@map("sous_categories")
}

// Modèle Produit
model Produit {
  code              String    @id
  designation       String
  quantite_en_stock Int       @default(0)
  prix_unitaire     Decimal   @db.Decimal(10, 2)
  image_url         String?
  sous_categorie_id Int
  actif             Boolean   @default(true)
  date_creation     DateTime  @default(now())
  date_modification DateTime  @updatedAt
  
  // Relations
  sous_categorie    SousCategorie   @relation(fields: [sous_categorie_id], references: [id])
  lignes_commande   LigneCommande[]

  @@map("produits")
}

// Modèle Fournisseur
model Fournisseur {
  id                Int        @id @default(autoincrement())
  nom               String     @unique
  adresse           String
  telephone         String?
  email             String?
  actif             Boolean    @default(true)
  date_creation     DateTime   @default(now())
  date_modification DateTime   @updatedAt
  
  // Relations
  commandes         Commande[]

  @@map("fournisseurs")
}

// Modèle Commande
model Commande {
  id                     Int             @id @default(autoincrement())
  date_commande          DateTime        @default(now())
  montant_total          Decimal         @db.Decimal(12, 2)
  date_livraison_prevue  DateTime
  date_livraison_reelle  DateTime?
  statut                 StatutCommande  @default(ENCOURS)
  fournisseur_id         Int
  date_creation          DateTime        @default(now())
  date_modification      DateTime        @updatedAt
  
  // Relations
  fournisseur            Fournisseur     @relation(fields: [fournisseur_id], references: [id])
  lignes_commande        LigneCommande[]
  paiements              Paiement[]

  @@map("commandes")
}

// Énumération des statuts de commande
enum StatutCommande {
  ENCOURS
  LIVRE
  PAYE
  ANNULE
}

// Modèle Ligne de commande (détail des produits dans une commande)
model LigneCommande {
  id                    Int     @id @default(autoincrement())
  commande_id           Int
  produit_code          String
  quantite_commandee    Int
  prix_achat_unitaire   Decimal @db.Decimal(10, 2)
  
  // Relations
  commande              Commande @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  produit               Produit  @relation(fields: [produit_code], references: [code])

  @@unique([commande_id, produit_code])
  @@map("lignes_commande")
}

// Modèle Paiement (versements)
model Paiement {
  id                Int      @id @default(autoincrement())
  commande_id       Int
  date_paiement     DateTime @default(now())
  montant_verse     Decimal  @db.Decimal(10, 2)
  numero_versement  Int      // 1, 2 ou 3 (maximum 3 versements)
  date_creation     DateTime @default(now())
  
  // Relations
  commande          Commande @relation(fields: [commande_id], references: [id])

  @@unique([commande_id, numero_versement])
  @@map("paiements")
}
